"""
ÏÇ¨Ïö©ÏûêÎ≥Ñ Î°úÍ∑∏ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
import logging
from pathlib import Path
from config import Config

class UserLogger:
    """ÏÇ¨Ïö©ÏûêÎ≥Ñ Î°úÍ∑∏ Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, log_dir: str = "logs"):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        self.setup_logging()
    
    def setup_logging(self):
        """Î°úÍπÖ ÏÑ§Ï†ï"""
        # ÏÑ§Ï†ïÏóêÏÑú Î°úÍπÖ ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞
        log_config = Config.get_logging_config()
        
        # Î°úÍ∑∏ Î†àÎ≤® ÏÑ§Ï†ï
        log_level = getattr(logging, log_config["level"].upper(), logging.INFO)
        
        # Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
        handlers = []
        
        # ÏΩòÏÜî Ìï∏Îì§Îü¨
        if log_config["console"]:
            console_handler = logging.StreamHandler()
            console_handler.setLevel(log_level)
            # Windows ÌôòÍ≤ΩÏóêÏÑú Ïú†ÎãàÏΩîÎìú Ïù¥Î™®ÏßÄ Ïò§Î•ò Î∞©ÏßÄ
            try:
                import sys
                if sys.platform == "win32":
                    # WindowsÏóêÏÑúÎäî Ïù¥Î™®ÏßÄÍ∞Ä Ìè¨Ìï®Îêú Î©îÏãúÏßÄÎ•º ÏïàÏ†ÑÌïòÍ≤å Ï≤òÎ¶¨
                    class SafeStreamHandler(logging.StreamHandler):
                        def emit(self, record):
                            try:
                                # Ïù¥Î™®ÏßÄÎ•º ASCII Î¨∏ÏûêÎ°ú ÎåÄÏ≤¥
                                msg = record.getMessage()
                                safe_msg = msg.replace('‚úÖ', '[OK]').replace('‚ùå', '[ERROR]').replace('‚ö†Ô∏è', '[WARN]').replace('üîç', '[DEBUG]').replace('üìÑ', '[PDF]').replace('üìù', '[INFO]').replace('üîÑ', '[PROCESS]').replace('ü§ñ', '[AI]').replace('üìä', '[STATS]').replace('üìö', '[EXAM]').replace('üí¨', '[CHAT]').replace('üìñ', '[CONTEXT]').replace('üìÖ', '[DATE]')
                                
                                # ÏÉàÎ°úÏö¥ Î†àÏΩîÎìú ÏÉùÏÑ± (ÏõêÎ≥∏ Î†àÏΩîÎìú ÏàòÏ†ï Î∞©ÏßÄ)
                                new_record = logging.LogRecord(
                                    name=record.name,
                                    level=record.levelno,
                                    pathname=record.pathname,
                                    lineno=record.lineno,
                                    msg=safe_msg,
                                    args=(),
                                    exc_info=record.exc_info,
                                    func=record.funcName
                                )
                                super().emit(new_record)
                            except UnicodeEncodeError:
                                # Ïú†ÎãàÏΩîÎìú Ïò§Î•ò Ïãú ASCIIÎ°ú Î≥ÄÌôò
                                try:
                                    safe_msg = record.getMessage().encode('ascii', 'ignore').decode('ascii')
                                    new_record = logging.LogRecord(
                                        name=record.name,
                                        level=record.levelno,
                                        pathname=record.pathname,
                                        lineno=record.lineno,
                                        msg=safe_msg,
                                        args=(),
                                        exc_info=record.exc_info,
                                        func=record.funcName
                                    )
                                    super().emit(new_record)
                                except:
                                    pass
                    console_handler = SafeStreamHandler()
                    console_handler.setLevel(log_level)
            except:
                pass
            console_handler.setFormatter(logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            ))
            handlers.append(console_handler)
        
        # ÌååÏùº Ìï∏Îì§Îü¨
        if log_config["file"]:
            file_handler = logging.FileHandler(log_config["file_path"], encoding='utf-8')
            file_handler.setLevel(log_level)
            file_handler.setFormatter(logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            ))
            handlers.append(file_handler)
        
        # Í∏∞Î≥∏ Ìï∏Îì§Îü¨ (ÏãúÏä§ÌÖú Î°úÍ∑∏)
        system_handler = logging.FileHandler(self.log_dir / 'system.log', encoding='utf-8')
        system_handler.setLevel(log_level)
        system_handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        ))
        handlers.append(system_handler)
        
        # Î°úÍπÖ ÏÑ§Ï†ï
        logging.basicConfig(
            level=log_level,
            handlers=handlers
        )
        self.logger = logging.getLogger(__name__)
    
    def get_user_log_file(self, user_id: str) -> Path:
        """ÏÇ¨Ïö©ÏûêÎ≥Ñ Î°úÍ∑∏ ÌååÏùº Í≤ΩÎ°ú Î∞òÌôò"""
        return self.log_dir / f"user_{user_id}.json"
    
    def log_user_activity(self, user_id: str, activity_type: str, data: Dict[str, Any]):
        """ÏÇ¨Ïö©Ïûê ÌôúÎèô Î°úÍ∑∏ Í∏∞Î°ù"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "user_id": user_id,
            "activity_type": activity_type,
            "data": data
        }
        
        log_file = self.get_user_log_file(user_id)
        
        # Í∏∞Ï°¥ Î°úÍ∑∏ ÏùΩÍ∏∞
        logs = []
        if log_file.exists():
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = json.load(f)
            except json.JSONDecodeError:
                logs = []
        
        # ÏÉà Î°úÍ∑∏ Ï∂îÍ∞Ä
        logs.append(log_entry)
        
        # Î°úÍ∑∏ Ï†ÄÏû•
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"User {user_id} activity logged: {activity_type}")
    
    def log_question_generation(self, user_id: str, subject: str, difficulty: str, 
                              question_type: str, generated_question: str):
        """Î¨∏Ï†ú ÏÉùÏÑ± Î°úÍ∑∏"""
        data = {
            "subject": subject,
            "difficulty": difficulty,
            "question_type": question_type,
            "generated_question": generated_question
        }
        self.log_user_activity(user_id, "question_generation", data)
    
    def log_answer_evaluation(self, user_id: str, question: str, user_answer: str, 
                            evaluation_result: str, is_correct: bool, score: float):
        """ÎãµÎ≥Ä ÌèâÍ∞Ä Î°úÍ∑∏"""
        data = {
            "question": question,
            "user_answer": user_answer,
            "evaluation_result": evaluation_result,
            "is_correct": is_correct,
            "score": score
        }
        self.log_user_activity(user_id, "answer_evaluation", data)
    
    def log_chat_interaction(self, user_id: str, message: str, ai_response: str):
        """Ï±óÎ¥á ÎåÄÌôî Î°úÍ∑∏"""
        data = {
            "message": message,
            "ai_response": ai_response
        }
        self.log_user_activity(user_id, "chat_interaction", data)
    
    def get_user_logs(self, user_id: str, activity_type: Optional[str] = None) -> List[Dict[str, Any]]:
        """ÏÇ¨Ïö©Ïûê Î°úÍ∑∏ Ï°∞Ìöå"""
        log_file = self.get_user_log_file(user_id)
        
        if not log_file.exists():
            return []
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                logs = json.load(f)
            
            if activity_type:
                logs = [log for log in logs if log.get("activity_type") == activity_type]
            
            return logs
        except json.JSONDecodeError:
            return []
    
    def get_user_statistics(self, user_id: str) -> Dict[str, Any]:
        """ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Ï†ïÎ≥¥"""
        logs = self.get_user_logs(user_id)
        
        if not logs:
            return {
                "total_activities": 0,
                "questions_generated": 0,
                "answers_evaluated": 0,
                "chat_interactions": 0,
                "correct_answers": 0,
                "total_answers": 0,
                "average_score": 0.0
            }
        
        stats = {
            "total_activities": len(logs),
            "questions_generated": len([log for log in logs if log.get("activity_type") == "question_generation"]),
            "answers_evaluated": len([log for log in logs if log.get("activity_type") == "answer_evaluation"]),
            "chat_interactions": len([log for log in logs if log.get("activity_type") == "chat_interaction"]),
            "correct_answers": 0,
            "total_answers": 0,
            "total_score": 0.0
        }
        
        # ÎãµÎ≥Ä ÌèâÍ∞Ä ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        evaluation_logs = [log for log in logs if log.get("activity_type") == "answer_evaluation"]
        for log in evaluation_logs:
            data = log.get("data", {})
            if data.get("is_correct"):
                stats["correct_answers"] += 1
            stats["total_answers"] += 1
            stats["total_score"] += data.get("score", 0.0)
        
        if stats["total_answers"] > 0:
            stats["average_score"] = stats["total_score"] / stats["total_answers"]
        else:
            stats["average_score"] = 0.0
        
        return stats
    
    def get_user_performance_by_subject(self, user_id: str) -> Dict[str, Dict[str, Any]]:
        """Í≥ºÎ™©Î≥Ñ ÏÑ±Í≥º Î∂ÑÏÑù"""
        evaluation_logs = self.get_user_logs(user_id, "answer_evaluation")
        
        subject_stats = {}
        
        for log in evaluation_logs:
            data = log.get("data", {})
            question = data.get("question", "")
            
            # Î¨∏Ï†úÏóêÏÑú Í≥ºÎ™© Ï∂îÏ∂ú (Í∞ÑÎã®Ìïú Î∞©Î≤ï)
            subject = "Í∏∞ÌÉÄ"  # Í∏∞Î≥∏Í∞í
            if "Ï†ïÎ≥¥ÏãúÏä§ÌÖú ÏùºÎ∞ò" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú ÏùºÎ∞ò"
            elif "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Í∞êÎ¶¨" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Í∞êÎ¶¨"
            elif "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Î≥¥Ïïà" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Î≥¥Ïïà"
            elif "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Ïö¥ÏòÅ" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Ïö¥ÏòÅ"
            elif "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Í∞úÎ∞ú" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Í∞úÎ∞ú"
            elif "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Íµ¨Ï∂ï" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Íµ¨Ï∂ï"
            elif "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Í¥ÄÎ¶¨" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú Í¥ÄÎ¶¨"
            elif "Ï†ïÎ≥¥ÏãúÏä§ÌÖú ÏÑ§Í≥Ñ" in question:
                subject = "Ï†ïÎ≥¥ÏãúÏä§ÌÖú ÏÑ§Í≥Ñ"
            
            if subject not in subject_stats:
                subject_stats[subject] = {
                    "total_questions": 0,
                    "correct_answers": 0,
                    "total_score": 0.0
                }
            
            subject_stats[subject]["total_questions"] += 1
            if data.get("is_correct"):
                subject_stats[subject]["correct_answers"] += 1
            subject_stats[subject]["total_score"] += data.get("score", 0.0)
        
        # ÌèâÍ∑† Ï†êÏàò Í≥ÑÏÇ∞
        for subject in subject_stats:
            total = subject_stats[subject]["total_questions"]
            if total > 0:
                subject_stats[subject]["average_score"] = subject_stats[subject]["total_score"] / total
                subject_stats[subject]["accuracy_rate"] = subject_stats[subject]["correct_answers"] / total
            else:
                subject_stats[subject]["average_score"] = 0.0
                subject_stats[subject]["accuracy_rate"] = 0.0
        
        return subject_stats
    
    def export_user_data(self, user_id: str, export_path: str):
        """ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞"""
        logs = self.get_user_logs(user_id)
        stats = self.get_user_statistics(user_id)
        performance = self.get_user_performance_by_subject(user_id)
        
        export_data = {
            "user_id": user_id,
            "export_timestamp": datetime.now().isoformat(),
            "statistics": stats,
            "performance_by_subject": performance,
            "detailed_logs": logs
        }
        
        with open(export_path, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"User {user_id} data exported to {export_path}")

# Ï†ÑÏó≠ Î°úÍ±∞ Ïù∏Ïä§ÌÑ¥Ïä§
user_logger = UserLogger() 